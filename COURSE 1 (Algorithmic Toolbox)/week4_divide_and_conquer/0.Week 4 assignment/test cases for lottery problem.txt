//Note: This is an advanced problem,so properly testing is needed because a lot of crucial observation needed here.
//If these test cases pass, then the code should be accepted to the autograder(of course not with naive algorithm.faster algorithm is needed)
//Test cases collected from discussion forum of this Course at COURSERA

// test case 1
2 3
0 5
7 10
1 6 11
output: 1 0 0

// test case 2
Input:
1 3
-10 10
-100 100 0
Output:
0 0 1

// test case 3
Input:
3 2
0 5
-3 2
7 10
1 6
Output:
2 0

// test case 4
Input:
5 1
1 2
1 2
1 2
1 2
1 2
3
Output: 0

// test case 5
Input:
6 1
2 2
2 2
0 2
0 2
-2 -1
-2 -1
0
Output: 2

// test case 6
Input:
2 1
6 12
8 10
6
Output: 1

// test case 7
Input:
2 2
3 4
3 4
3 3
Output: 2 2

// test case 8
Input:
6 21
6 12
8 10
0 2
0 4
-6 -2
-4 -2
-7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13
output: 0 1 1 2 2 2 0 2 2 2 1 1 0 1 1 2 2 2 1 1 0

// test case 9
Input:
3 11
0 2
-6 -4
-4 -2
-7 -6 -5 -4 -3 -2 -1 0 1 2 3
Output: 0 1 1 2 1 1 0 1 1 1 0

// test case 10
2 2
1 2
1 2
1 2
Output: 2 2

// test case 11
2 1
1 1
2 4
4
Output: 1

// test case 12
2 5
1 5
-4 2
-4 -4 2 10 -4
Output: 1 1 2 0 1

// test case 13
4 3
3 3
8 11
9 11
12 14
11 11 12
Output: 2 2 1

// test case 14
4 7
-10 1
-8 1
1 4
2 5
-11 -10 -9 -8 -7 -5 0
Output: 0 1 1 2 2 2 2

// test case 15
2 5
1 5
-4 2
-4 -4 2 10 -4
Output: 1 1 2 0 1

// test case 16
2 3
1 2
2 3
1 2 3
Output: 1 2 1

// test case 17
4 6
1 3
3 6
5 9
9 9
1 2 3 4 5 6
Output: 1 1 2 1 2 2
